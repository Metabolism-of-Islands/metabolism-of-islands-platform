# Generated by Django 3.1.2 on 2020-10-23 09:00

import core.models
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import stdimage.models
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.CharField(blank=True, choices=[('academic', 'Academic'), ('theses', 'Theses'), ('reports', 'Reports'), ('multimedia', 'Multimedia')], max_length=20, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(help_text='Only include the icon name, not fa- classes --- see https://fontawesome.com/icons?d=gallery', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_html', models.TextField(blank=True, help_text='Do not edit... auto-generated by the system', null=True)),
                ('image', stdimage.models.StdImageField(blank=True, null=True, upload_to='records')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('old_id', models.IntegerField(blank=True, db_index=True, help_text='Only used for the migration between old and new structure', null=True)),
                ('meta_data', models.JSONField(blank=True, null=True)),
            ],
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='Should only be set for permissions, and should only be modified by the programming team', max_length=20, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_permission', models.BooleanField(default=False, help_text='Mark if this relationship is about giving people permissions in the system')),
            ],
        ),
        migrations.CreateModel(
            name='SocialMediaPlatform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('symbol', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.IntegerField(choices=[(1, 'Mass'), (2, 'Volume'), (3, 'Count'), (4, 'Area'), (5, 'Energy'), (6, 'Length'), (7, 'Fraction'), (99, 'Other')], db_index=True, default=99)),
                ('multiplication_factor', models.FloatField(blank=True, help_text='By which factor should we multiply this to get a quantity in the default unit for this type of measurement?', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Creating'), (2, 'Uploading'), (3, 'Reviewing'), (4, 'Curating'), (5, 'Sharing'), (6, 'Participating'), (7, 'Learning'), (8, 'Administering'), (9, 'Programming'), (10, 'Designing'), (11, 'Communicating')], db_index=True)),
                ('name', models.CharField(max_length=255)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('points', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('url', models.URLField(blank=True, help_text='Is there a specific link a user could go to in order to work on this task? If so, put it here', null=True)),
            ],
            options={
                'verbose_name_plural': 'work activities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('code', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('is_separator', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': 'activities',
                'db_table': 'stafdb_activity',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityCatalog',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('url', models.URLField(blank=True, null=True)),
                ('original_file', models.FileField(blank=True, null=True, upload_to='activity_catalogs')),
            ],
            options={
                'verbose_name_plural': 'activity catalogs',
                'db_table': 'stafdb_activitycatalog',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('date', models.DateField()),
                ('slug', models.SlugField(max_length=255)),
            ],
            options={
                'ordering': ['-date', '-id'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('slug', models.CharField(max_length=255, null=True)),
                ('faq', models.TextField(blank=True, null=True)),
            ],
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseModule',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('part_of_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='core.course')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FlowDiagram',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('icon', models.CharField(blank=True, help_text='Only include the icon name, not fa- classes --- see https://fontawesome.com/icons?d=gallery', max_length=50, null=True)),
            ],
            options={
                'db_table': 'stafdb_flowdiagram',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Geocode',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('depth', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'stafdb_geocode',
                'ordering': ['depth', 'pk'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='LibraryItem',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('language', models.CharField(blank=True, choices=[('EN', 'English'), ('ES', 'Spanish'), ('CH', 'Chinese'), ('FR', 'French'), ('GE', 'German'), ('NL', 'Dutch'), ('PT', 'Portuguese'), ('OT', 'Other')], default='EN', max_length=2, null=True)),
                ('title_original_language', models.CharField(blank=True, max_length=255, null=True)),
                ('author_list', models.TextField(blank=True, null=True)),
                ('author_citation', models.TextField(blank=True, null=True)),
                ('bibtex_citation', models.TextField(blank=True, null=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('abstract_original_language', models.TextField(blank=True, null=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='library')),
                ('url', models.CharField(blank=True, max_length=500, null=True)),
                ('file_url', models.URLField(blank=True, null=True)),
                ('open_access', models.BooleanField(blank=True, null=True)),
                ('doi', models.CharField(blank=True, max_length=255, null=True)),
                ('isbn', models.CharField(blank=True, max_length=255, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('active', 'Active'), ('deleted', 'Deleted')], db_index=True, help_text='Old field, do not use', max_length=8, null=True)),
                ('geocodes', models.ManyToManyField(blank=True, to='core.Geocode')),
                ('is_part_of', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.libraryitem')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.license')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.libraryitemtype')),
            ],
            options={
                'ordering': ['-year', 'name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('code', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('measurement_type', models.IntegerField(blank=True, choices=[(1, 'Mass'), (2, 'Volume'), (3, 'Count'), (4, 'Area'), (5, 'Energy'), (6, 'Length'), (7, 'Fraction'), (99, 'Other')], db_index=True, default=1, null=True)),
                ('icon', models.CharField(blank=True, help_text='Only include the icon name, not fa- classes --- see https://fontawesome.com/icons?d=gallery', max_length=50, null=True)),
            ],
            options={
                'db_table': 'stafdb_material',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='MaterialCatalog',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('original_file', models.FileField(blank=True, null=True, upload_to='material_catalogs')),
            ],
            options={
                'db_table': 'stafdb_materialcatalog',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
            ],
            options={
                'ordering': ['date_created'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=255, null=True)),
                ('researchgate', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('slug', models.SlugField(max_length=255)),
                ('type', models.CharField(choices=[('academic', 'Research Institution'), ('universities', 'Universities'), ('city_government', 'City Government'), ('regional_government', 'Regional Government'), ('national_government', 'National Government'), ('statistical_agency', 'Statistical Agency'), ('private_sector', 'Private Sector'), ('publisher', 'Publishers'), ('journal', 'Journal'), ('society', 'Academic Society'), ('ngo', 'NGO'), ('funding_program', 'Funding Programme'), ('other', 'Other')], max_length=20)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('lastname', models.CharField(blank=True, max_length=255, null=True)),
                ('affiliation', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('email_public', models.BooleanField(default=False)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('google_scholar', models.CharField(blank=True, max_length=255, null=True)),
                ('orcid', models.CharField(blank=True, max_length=255, null=True)),
                ('researchgate', models.CharField(blank=True, max_length=255, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=255, null=True)),
                ('research_interests', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('retired', 'Retired'), ('deceased', 'Deceased'), ('inactive', 'Inactive'), ('pending', 'Pending Review')], default='active', max_length=8)),
            ],
            options={
                'verbose_name_plural': 'people',
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('contributor_page', tinymce.models.HTMLField(blank=True, null=True)),
                ('support_page', tinymce.models.HTMLField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('finished', 'Finished'), ('cancelled', 'Cancelled')], default='ongoing', max_length=20)),
                ('has_subsite', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('screenshot', stdimage.models.StdImageField(blank=True, help_text='1280x1024 is best - do not include browser tabs/menus', null=True, upload_to='project_screenshots')),
                ('summary_sentence', models.CharField(blank=True, help_text='Describe the project in a single sentence', max_length=255, null=True)),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.projecttype')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSpace',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'stafdb_referencespace',
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WebpageDesign',
            fields=[
                ('webpage', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.record')),
                ('header', models.CharField(choices=[('inherit', 'No custom header - use the project header'), ('full', 'Full header with title and subtitle'), ('small', 'Small header; menu only'), ('image', 'Image underneath menu')], default='full', max_length=7)),
                ('header_title', models.CharField(blank=True, max_length=100, null=True)),
                ('header_subtitle', models.CharField(blank=True, max_length=255, null=True)),
                ('header_image', stdimage.models.StdImageField(blank=True, null=True, upload_to='header_image')),
                ('custom_css', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ZoteroCollection',
            fields=[
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('record_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='core.record')),
                ('api', models.CharField(max_length=255)),
                ('zotero_id', models.CharField(max_length=255)),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_html', models.TextField(blank=True, help_text='Do not edit... auto-generated by the system', null=True)),
                ('hidden', models.BooleanField(db_index=True, default=False, help_text='Mark if tag is superseded/not yet approved/deactivated')),
                ('include_in_glossary', models.BooleanField(db_index=True, default=False)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('icon', models.CharField(blank=True, help_text='Only include the icon name, not fa- classes --- see https://fontawesome.com/icons?d=gallery', max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=30, null=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('belongs_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.record')),
                ('parent_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.tag')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(blank=True, choices=[('draft', 'Draft'), ('discarded', 'Discarded'), ('ready', 'Ready for publication'), ('published', 'Published')], default='draft', max_length=20, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('image', stdimage.models.StdImageField(blank=True, null=True, upload_to='socialmedia')),
                ('campaign', models.ForeignKey(limit_choices_to={'parent_tag_id': 927}, on_delete=django.db.models.deletion.CASCADE, to='core.tag')),
                ('platforms', models.ManyToManyField(to='core.SocialMediaPlatform')),
                ('record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.record')),
            ],
        ),
        migrations.CreateModel(
            name='RecordRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('record_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_list', to='core.record')),
                ('record_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_list', to='core.record')),
                ('relationship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.relationship')),
            ],
            options={
                'verbose_name': 'relationship manager',
                'verbose_name_plural': 'relationship manager',
                'unique_together': {('record_parent', 'relationship', 'record_child')},
            },
        ),
        migrations.AddField(
            model_name='record',
            name='child_of',
            field=models.ManyToManyField(related_name='parent_of_child', through='core.RecordRelationship', to='core.Record'),
        ),
        migrations.AddField(
            model_name='record',
            name='parent_to',
            field=models.ManyToManyField(related_name='child_of_parent', through='core.RecordRelationship', to='core.Record'),
        ),
        migrations.AddField(
            model_name='record',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.Tag'),
        ),
        migrations.CreateModel(
            name='CourseQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=255)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.coursequestion')),
            ],
        ),
        migrations.AddField(
            model_name='coursequestion',
            name='answer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.coursequestionanswer'),
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Bronze'), (2, 'Silver'), (3, 'Gold')], db_index=True)),
                ('code', models.CharField(blank=True, db_index=True, help_text='Do not change, this is used in the code to verify if people have the right permission level', max_length=20, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('required_quantity', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('worktype', models.ManyToManyField(blank=True, to='core.WorkActivity')),
                ('projects', models.ManyToManyField(blank=True, to='core.Project')),
            ],
            options={
                'ordering': ['code', 'type'],
            },
        ),
        migrations.CreateModel(
            name='DataPortal',
            fields=[
                ('libraryitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.libraryitem')),
                ('software', models.IntegerField(blank=True, choices=[(1, 'CKAN'), (2, 'DKAN'), (3, 'Junar'), (4, 'OpenDataSoft'), (5, 'sixcms'), (6, 'Socrata'), (7, 'terraCatalogue'), (8, 'Custom / inhouse implementation'), (9, 'Other platform'), (10, 'ArcGIS Open Data')], null=True)),
                ('has_api', models.BooleanField(db_index=True, default=True)),
            ],
            bases=('core.libraryitem',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('libraryitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.libraryitem')),
                ('data_year_start', models.IntegerField(blank=True, null=True)),
                ('data_year_end', models.IntegerField(blank=True, null=True)),
                ('data_interval', models.CharField(blank=True, max_length=50, null=True)),
                ('update_frequency', models.CharField(blank=True, max_length=50, null=True)),
                ('has_api', models.BooleanField(db_index=True, default=True)),
                ('size', models.IntegerField(blank=True, help_text='Size in MB', null=True)),
            ],
            bases=('core.libraryitem',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('libraryitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.libraryitem')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=1, null=True)),
            ],
            bases=('core.libraryitem',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProjectDesign',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='design', serialize=False, to='core.project')),
                ('header', models.CharField(choices=[('full', 'Full header with title and subtitle'), ('small', 'Small header; menu only'), ('image', 'Image underneath menu')], default='full', max_length=6)),
                ('header_color', models.CharField(choices=[('dark', 'Dark background, light text'), ('light', 'Light background, dark text')], default='dark', max_length=6)),
                ('logo', models.FileField(blank=True, null=True, upload_to='logos')),
                ('custom_css', models.TextField(blank=True, null=True)),
                ('back_link', models.BooleanField(default=True)),
                ('show_footer_1', models.BooleanField(default=True)),
                ('show_footer_2', models.BooleanField(default=True)),
                ('show_footer_3', models.BooleanField(default=True)),
                ('content_footer_4', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('libraryitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.libraryitem')),
                ('embed_code', models.CharField(blank=True, max_length=20, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('duration', models.PositiveSmallIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('video_site', models.CharField(choices=[('youtube', 'Youtube'), ('vimeo', 'Vimeo'), ('ted', 'TED'), ('other', 'Other')], max_length=14)),
            ],
            bases=('core.libraryitem',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ZoteroItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255)),
                ('data', models.JSONField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.zoterocollection')),
                ('library_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.libraryitem')),
            ],
        ),
        migrations.CreateModel(
            name='WorkSprint',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('projects', models.ManyToManyField(blank=True, to='core.Project')),
                ('work_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tag')),
            ],
            options={
                'ordering': ['-start_date'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='workactivity',
            name='default_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project'),
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('status', models.IntegerField(choices=[(1, 'Open'), (2, 'Completed'), (3, 'Discarded'), (4, 'On Hold'), (5, 'In Progress')], db_index=True, default=1)),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], db_index=True, default=2)),
                ('url', models.URLField(blank=True, help_text='Is there a specific link a user could go to in order to work on this task? If so, put it here', null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.people')),
                ('last_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.message')),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('related_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='my_work', to='core.record')),
                ('workactivity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.workactivity')),
            ],
            options={
                'verbose_name_plural': 'work items',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Webpage',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('type', models.CharField(choices=[('html', 'HTML'), ('markdown', 'Markdown'), ('markdown_html', 'Markdown and HTML')], default='markdown', max_length=13)),
                ('slug', models.CharField(db_index=True, max_length=100)),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='webpages', to='core.project')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UploadSession',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('type', models.CharField(choices=[('shapefile', 'Shapefile'), ('flowdata', 'Material flow data'), ('stockdata', 'Material stock data')], max_length=20)),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.project')),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.people')),
            ],
            options={
                'db_table': 'stafdb_uploadsession',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to=core.models.upload_directory)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.uploadsession')),
            ],
            options={
                'db_table': 'stafdb_uploadfile',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.SlugField(max_length=255)),
                ('activities', models.ManyToManyField(db_table='stafdb_sector_activities', to='core.Activity')),
            ],
            options={
                'db_table': 'stafdb_sector',
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSpaceGeocode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('geocode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.geocode')),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.referencespace')),
            ],
            options={
                'db_table': 'stafdb_referencespace_geocode',
            },
        ),
        migrations.AddField(
            model_name='referencespace',
            name='geocodes',
            field=models.ManyToManyField(through='core.ReferenceSpaceGeocode', to='core.Geocode'),
        ),
        migrations.AddField(
            model_name='referencespace',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imported_spaces', to='core.libraryitem'),
        ),
        migrations.CreateModel(
            name='RecordHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Historic version'), (2, 'New draft version (unapproved)'), (3, 'Rejected version')], db_index=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='core.record')),
                ('people', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='record_history', to='core.people')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='record',
            name='materials',
            field=models.ManyToManyField(blank=True, to='core.Material'),
        ),
        migrations.AddField(
            model_name='record',
            name='sectors',
            field=models.ManyToManyField(blank=True, to='core.Sector'),
        ),
        migrations.AddField(
            model_name='record',
            name='spaces',
            field=models.ManyToManyField(blank=True, to='core.ReferenceSpace'),
        ),
        migrations.AddField(
            model_name='record',
            name='subscribers',
            field=models.ManyToManyField(blank=True, to='core.People'),
        ),
        migrations.CreateModel(
            name='PublicProject',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('target_finish_date', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('finished', 'Finished'), ('cancelled', 'Cancelled')], default='ongoing', max_length=20)),
                ('type', models.CharField(choices=[('thesis', 'Thesis project'), ('research', 'Research project')], default='research', max_length=20)),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='people',
            name='badges',
            field=models.ManyToManyField(blank=True, to='core.Badge'),
        ),
        migrations.AddField(
            model_name='people',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(db_index=True, default=False)),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notified_people', to='core.record')),
                ('people', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.people')),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('date', models.DateField()),
                ('slug', models.SlugField(max_length=255)),
                ('include_in_timeline', models.BooleanField(default=False)),
                ('projects', models.ManyToManyField(to='core.Project')),
            ],
            options={
                'verbose_name_plural': 'news',
                'ordering': ['-date', '-id'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='message',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.record'),
        ),
        migrations.AddField(
            model_name='message',
            name='posted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='message_list', to='core.people'),
        ),
        migrations.CreateModel(
            name='MaterialDemand',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('quantity', models.FloatField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('material_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.material')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demand', to='core.record')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unit')),
            ],
            options={
                'ordering': ['start_date'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='material',
            name='catalog',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content', to='core.materialcatalog'),
        ),
        migrations.AddField(
            model_name='material',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.material'),
        ),
        migrations.CreateModel(
            name='GeocodeScheme',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('url', models.URLField(blank=True, null=True)),
                ('is_comprehensive', models.BooleanField(db_index=True, default=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.IntegerField(choices=[(1, 'National subdivisions'), (2, 'Sectoral infrastructure'), (3, 'Administrative areas')], db_index=True, default=3)),
                ('coverage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.referencespace')),
            ],
            options={
                'db_table': 'stafdb_geocode_scheme',
                'ordering': ['name'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='geocode',
            name='scheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geocodes', to='core.geocodescheme'),
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('is_starred', models.BooleanField(default=False, null=True)),
                ('parent_url', models.URLField(blank=True, db_index=True, null=True)),
                ('last_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.message')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forum_topics', to='core.record')),
                ('part_of_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            options={
                'ordering': ['-is_starred', '-last_update__date_created'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FlowBlocks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_label', models.CharField(blank=True, max_length=255, null=True)),
                ('destination_label', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks_to', to='core.activity')),
                ('diagram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks', to='core.flowdiagram')),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks_from', to='core.activity')),
            ],
            options={
                'db_table': 'stafdb_flowblocks',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('type', models.CharField(blank=True, choices=[('conference', 'Conference'), ('hackathon', 'Hackathon'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('summerschool', 'Summer School'), ('other', 'Other'), ('training_outreach', 'Training and Outreach')], max_length=20, null=True)),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=255)),
                ('projects', models.ManyToManyField(to='core.Project')),
            ],
            options={
                'ordering': ['-start_date', '-id'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='EurostatDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=2000)),
                ('code', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('last_update', models.CharField(blank=True, max_length=255, null=True)),
                ('data_start', models.CharField(blank=True, max_length=255, null=True)),
                ('data_end', models.CharField(blank=True, max_length=255, null=True)),
                ('url_overwrite', models.URLField(blank=True, max_length=255, null=True)),
                ('is_reviewed', models.BooleanField(db_index=True, default=False)),
                ('is_approved', models.BooleanField(blank=True, db_index=True, null=True)),
                ('is_denied', models.BooleanField(blank=True, db_index=True, null=True)),
                ('is_duplicate', models.BooleanField(blank=True, db_index=True, default=False, null=True)),
                ('has_no_meta_data', models.BooleanField(blank=True, db_index=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('tags', models.ManyToManyField(blank=True, to='core.Tag')),
                ('spaces', models.ManyToManyField(blank=True, to='core.ReferenceSpace')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=core.models.upload_directory)),
                ('attached_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.record')),
            ],
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataArticle',
            fields=[
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('record_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='core.record')),
                ('completion', models.IntegerField(choices=[(1, 'Stub'), (2, 'Medium article'), (3, 'Complete article')])),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True)),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.language')),
                ('part_of_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='coursequestion',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.coursemodule'),
        ),
        migrations.CreateModel(
            name='CourseContent',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.record')),
                ('type', models.IntegerField(choices=[(1, 'Video'), (2, 'Text'), (3, 'Exercise')], db_index=True, default=1)),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content', to='core.coursemodule')),
            ],
            options={
                'ordering': ['position'],
            },
            bases=('core.record',),
            managers=[
                ('objects_unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_channel', to='core.record')),
                ('people', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='core.people')),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='catalog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.activitycatalog'),
        ),
        migrations.AddField(
            model_name='activity',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.activity'),
        ),
        migrations.CreateModel(
            name='ActivatedSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(db_index=True, max_length=255)),
                ('part_of_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activated', to='core.referencespace')),
            ],
            options={
                'ordering': ['space__name'],
            },
        ),
        migrations.AddConstraint(
            model_name='webpage',
            constraint=models.UniqueConstraint(fields=('part_of_project', 'slug'), name='project_slug'),
        ),
        migrations.AddField(
            model_name='sector',
            name='photo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.photo'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='activities',
            field=models.ManyToManyField(blank=True, to='core.Activity'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='data_formats',
            field=models.ManyToManyField(blank=True, limit_choices_to={'parent_tag_id': 786}, related_name='library_datasets', to='core.Tag'),
        ),
        migrations.AddField(
            model_name='coursecontent',
            name='video',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.video'),
        ),
        migrations.AlterUniqueTogether(
            name='activatedspace',
            unique_together={('slug', 'part_of_project')},
        ),
    ]
